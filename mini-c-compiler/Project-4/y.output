Terminals unused in grammar

    CONST


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 $@1: %empty

    6 $@2: %empty

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt

    8 type: data_type pointer
    9     | data_type

   10 pointer: '*' pointer
   11        | '*'

   12 data_type: sign_specifier type_specifier
   13          | type_specifier

   14 sign_specifier: SIGNED
   15               | UNSIGNED

   16 type_specifier: INT
   17               | SHORT INT
   18               | SHORT
   19               | LONG
   20               | LONG INT
   21               | LONG_LONG
   22               | LONG_LONG INT
   23               | CHAR
   24               | FLOAT
   25               | VOID
   26               | CHAR_STAR

   27 argument_list: arguments
   28              | %empty

   29 arguments: arguments ',' arg
   30          | arg

   31 arg: type identifier

   32 stmt: compound_stmt
   33     | single_stmt

   34 $@3: %empty

   35 compound_stmt: '{' $@3 statements '}'

   36 statements: statements M stmt
   37           | %empty

   38 single_stmt: if_block
   39            | for_block
   40            | while_block
   41            | declaration
   42            | function_call ';'
   43            | RETURN ';'
   44            | CONTINUE ';'
   45            | BREAK ';'
   46            | RETURN sub_expr ';'

   47 $@4: %empty

   48 $@5: %empty

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

   50 if_block: IF '(' expression ')' M stmt
   51         | IF '(' expression ')' M stmt ELSE N M stmt

   52 $@6: %empty

   53 $@7: %empty

   54 while_block: WHILE M '(' expression ')' M $@6 stmt $@7

   55 declaration: type declaration_list ';'
   56            | declaration_list ';'
   57            | unary_expr ';'

   58 declaration_list: declaration_list ',' sub_decl
   59                 | sub_decl

   60 sub_decl: assignment_expr
   61         | identifier
   62         | array_access

   63 expression_stmt: expression ';'
   64                | ';'

   65 expression: expression ',' sub_expr
   66           | sub_expr

   67 sub_expr: sub_expr '>' sub_expr
   68         | sub_expr '<' sub_expr
   69         | sub_expr EQ sub_expr
   70         | sub_expr NOT_EQ sub_expr
   71         | sub_expr GR_EQ sub_expr
   72         | sub_expr LS_EQ sub_expr
   73         | sub_expr LOGICAL_AND M sub_expr
   74         | sub_expr LOGICAL_OR M sub_expr
   75         | '!' sub_expr
   76         | arithmetic_expr
   77         | assignment_expr
   78         | unary_expr

   79 assignment_expr: lhs assign arithmetic_expr
   80                | lhs assign array_access
   81                | lhs assign function_call
   82                | lhs assign unary_expr
   83                | unary_expr assign unary_expr

   84 unary_expr: identifier INCREMENT
   85           | identifier DECREMENT
   86           | DECREMENT identifier
   87           | INCREMENT identifier

   88 lhs: identifier
   89    | array_access

   90 identifier: IDENTIFIER

   91 assign: '='
   92       | ADD_ASSIGN
   93       | SUB_ASSIGN
   94       | MUL_ASSIGN
   95       | DIV_ASSIGN
   96       | MOD_ASSIGN

   97 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   98                | arithmetic_expr '-' arithmetic_expr
   99                | arithmetic_expr '*' arithmetic_expr
  100                | arithmetic_expr '/' arithmetic_expr
  101                | arithmetic_expr '%' arithmetic_expr
  102                | '(' arithmetic_expr ')'
  103                | '-' arithmetic_expr
  104                | identifier
  105                | constant

  106 constant: DEC_CONSTANT
  107         | HEX_CONSTANT
  108         | CHAR_CONSTANT
  109         | FLOAT_CONSTANT

  110 array_access: identifier '[' array_index ']'

  111 array_index: constant
  112            | identifier

  113 function_call: identifier '(' parameter_list ')'
  114              | identifier '(' ')'

  115 parameter_list: parameter_list ',' parameter
  116               | parameter

  117 parameter: sub_expr
  118          | STRING

  119 M: %empty

  120 N: %empty


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 75
    '%' (37) 101
    '(' (40) 7 49 50 51 54 102 113 114
    ')' (41) 7 49 50 51 54 102 113 114
    '*' (42) 10 11 99
    '+' (43) 97
    ',' (44) 29 58 65 115
    '-' (45) 98 103
    '/' (47) 100
    ';' (59) 42 43 44 45 46 55 56 57 63 64
    '<' (60) 68
    '=' (61) 91
    '>' (62) 67
    '[' (91) 110
    ']' (93) 110
    '{' (123) 35
    '}' (125) 35
    error (256)
    IDENTIFIER <entry> (258) 90
    DEC_CONSTANT <entry> (259) 106
    HEX_CONSTANT <entry> (260) 107
    CHAR_CONSTANT <entry> (261) 108
    FLOAT_CONSTANT <entry> (262) 109
    STRING <entry> (263) 118
    LOGICAL_AND (264) 73
    LOGICAL_OR (265) 74
    LS_EQ (266) 72
    GR_EQ (267) 71
    EQ (268) 69
    NOT_EQ (269) 70
    MUL_ASSIGN (270) 94
    DIV_ASSIGN (271) 95
    MOD_ASSIGN (272) 96
    ADD_ASSIGN (273) 92
    SUB_ASSIGN (274) 93
    INCREMENT (275) 84 87
    DECREMENT (276) 85 86
    SHORT (277) 17 18
    INT (278) 16 17 20 22
    LONG (279) 19 20
    LONG_LONG (280) 21 22
    SIGNED (281) 14
    UNSIGNED (282) 15
    CONST (283)
    VOID (284) 25
    CHAR (285) 23
    FLOAT (286) 24
    CHAR_STAR (287) 26
    IF (288) 50 51
    FOR (289) 49
    WHILE (290) 54
    CONTINUE (291) 44
    BREAK (292) 45
    RETURN (293) 43 46
    UMINUS (294)
    LOWER_THAN_ELSE (295)
    ELSE (296) 51


Nonterminals, with rules where they appear

    $accept (59)
        on left: 0
    starter (60)
        on left: 1 2
        on right: 0 1
    builder (61)
        on left: 3 4
        on right: 1 2
    function (62)
        on left: 7
        on right: 3
    $@1 (63)
        on left: 5
        on right: 7
    $@2 (64)
        on left: 6
        on right: 7
    type (65)
        on left: 8 9
        on right: 7 31 55
    pointer (66)
        on left: 10 11
        on right: 8 10
    data_type (67)
        on left: 12 13
        on right: 8 9
    sign_specifier (68)
        on left: 14 15
        on right: 12
    type_specifier (69)
        on left: 16 17 18 19 20 21 22 23 24 25 26
        on right: 12 13
    argument_list (70)
        on left: 27 28
        on right: 7
    arguments (71)
        on left: 29 30
        on right: 27 29
    arg (72)
        on left: 31
        on right: 29 30
    stmt <content> (73)
        on left: 32 33
        on right: 36 49 50 51 54
    compound_stmt <content> (74)
        on left: 35
        on right: 7 32
    $@3 (75)
        on left: 34
        on right: 35
    statements <content> (76)
        on left: 36 37
        on right: 35 36
    single_stmt <content> (77)
        on left: 38 39 40 41 42 43 44 45 46
        on right: 33
    for_block <content> (78)
        on left: 49
        on right: 39
    $@4 (79)
        on left: 47
        on right: 49
    $@5 (80)
        on left: 48
        on right: 49
    if_block <content> (81)
        on left: 50 51
        on right: 38
    while_block <content> (82)
        on left: 54
        on right: 40
    $@6 (83)
        on left: 52
        on right: 54
    $@7 (84)
        on left: 53
        on right: 54
    declaration (85)
        on left: 55 56 57
        on right: 4 41
    declaration_list (86)
        on left: 58 59
        on right: 55 56 58
    sub_decl (87)
        on left: 60 61 62
        on right: 58 59
    expression_stmt <content> (88)
        on left: 63 64
        on right: 49
    expression <content> (89)
        on left: 65 66
        on right: 49 50 51 54 63 65
    sub_expr <content> (90)
        on left: 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 46 65 66 67 68 69 70 71 72 73 74 75 117
    assignment_expr <content> (91)
        on left: 79 80 81 82 83
        on right: 60 77
    unary_expr <content> (92)
        on left: 84 85 86 87
        on right: 57 78 82 83
    lhs <content> (93)
        on left: 88 89
        on right: 79 80 81 82
    identifier <entry> (94)
        on left: 90
        on right: 7 31 61 84 85 86 87 88 104 110 112 113 114
    assign <op> (95)
        on left: 91 92 93 94 95 96
        on right: 79 80 81 82 83
    arithmetic_expr <content> (96)
        on left: 97 98 99 100 101 102 103 104 105
        on right: 76 79 97 98 99 100 101 102 103
    constant <entry> (97)
        on left: 106 107 108 109
        on right: 105 111
    array_access <content> (98)
        on left: 110
        on right: 62 80 89
    array_index <entry> (99)
        on left: 111 112
        on right: 110
    function_call <data_type> (100)
        on left: 113 114
        on right: 42 81
    parameter_list (101)
        on left: 115 116
        on right: 113 115
    parameter (102)
        on left: 117 118
        on right: 115 116
    M <instr> (103)
        on left: 119
        on right: 36 49 50 51 54 73 74
    N <content> (104)
        on left: 120
        on right: 49 51


State 0

    0 $accept: â€¢ starter $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    starter           go to state 14
    builder           go to state 15
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 1

   90 identifier: IDENTIFIER â€¢

    $default  reduce using rule 90 (identifier)


State 2

   87 unary_expr: INCREMENT â€¢ identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 29


State 3

   86 unary_expr: DECREMENT â€¢ identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 30


State 4

   17 type_specifier: SHORT â€¢ INT
   18               | SHORT â€¢

    INT  shift, and go to state 31

    $default  reduce using rule 18 (type_specifier)


State 5

   16 type_specifier: INT â€¢

    $default  reduce using rule 16 (type_specifier)


State 6

   19 type_specifier: LONG â€¢
   20               | LONG â€¢ INT

    INT  shift, and go to state 32

    $default  reduce using rule 19 (type_specifier)


State 7

   21 type_specifier: LONG_LONG â€¢
   22               | LONG_LONG â€¢ INT

    INT  shift, and go to state 33

    $default  reduce using rule 21 (type_specifier)


State 8

   14 sign_specifier: SIGNED â€¢

    $default  reduce using rule 14 (sign_specifier)


State 9

   15 sign_specifier: UNSIGNED â€¢

    $default  reduce using rule 15 (sign_specifier)


State 10

   25 type_specifier: VOID â€¢

    $default  reduce using rule 25 (type_specifier)


State 11

   23 type_specifier: CHAR â€¢

    $default  reduce using rule 23 (type_specifier)


State 12

   24 type_specifier: FLOAT â€¢

    $default  reduce using rule 24 (type_specifier)


State 13

   26 type_specifier: CHAR_STAR â€¢

    $default  reduce using rule 26 (type_specifier)


State 14

    0 $accept: starter â€¢ $end
    1 starter: starter â€¢ builder

    $end        shift, and go to state 34
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13

    builder           go to state 35
    function          go to state 16
    type              go to state 17
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    declaration       go to state 21
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 15

    2 starter: builder â€¢

    $default  reduce using rule 2 (starter)


State 16

    3 builder: function â€¢

    $default  reduce using rule 3 (builder)


State 17

    7 function: type â€¢ identifier $@1 '(' argument_list ')' $@2 compound_stmt
   55 declaration: type â€¢ declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 37
    lhs               go to state 26
    identifier        go to state 38
    array_access      go to state 28


State 18

    8 type: data_type â€¢ pointer
    9     | data_type â€¢

    '*'  shift, and go to state 39

    $default  reduce using rule 9 (type)

    pointer  go to state 40


State 19

   12 data_type: sign_specifier â€¢ type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type_specifier  go to state 41


State 20

   13 data_type: type_specifier â€¢

    $default  reduce using rule 13 (data_type)


State 21

    4 builder: declaration â€¢

    $default  reduce using rule 4 (builder)


State 22

   56 declaration: declaration_list â€¢ ';'
   58 declaration_list: declaration_list â€¢ ',' sub_decl

    ','  shift, and go to state 42
    ';'  shift, and go to state 43


State 23

   59 declaration_list: sub_decl â€¢

    $default  reduce using rule 59 (declaration_list)


State 24

   60 sub_decl: assignment_expr â€¢

    $default  reduce using rule 60 (sub_decl)


State 25

   57 declaration: unary_expr â€¢ ';'
   83 assignment_expr: unary_expr â€¢ assign unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49
    ';'         shift, and go to state 50

    assign  go to state 51


State 26

   79 assignment_expr: lhs â€¢ assign arithmetic_expr
   80                | lhs â€¢ assign array_access
   81                | lhs â€¢ assign function_call
   82                | lhs â€¢ assign unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    assign  go to state 52


State 27

   61 sub_decl: identifier â€¢
   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT
   88 lhs: identifier â€¢
  110 array_access: identifier â€¢ '[' array_index ']'

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54
    '['        shift, and go to state 55

    ','       reduce using rule 61 (sub_decl)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 88 (lhs)


State 28

   62 sub_decl: array_access â€¢
   89 lhs: array_access â€¢

    ','       reduce using rule 62 (sub_decl)
    ';'       reduce using rule 62 (sub_decl)
    $default  reduce using rule 89 (lhs)


State 29

   87 unary_expr: INCREMENT identifier â€¢

    $default  reduce using rule 87 (unary_expr)


State 30

   86 unary_expr: DECREMENT identifier â€¢

    $default  reduce using rule 86 (unary_expr)


State 31

   17 type_specifier: SHORT INT â€¢

    $default  reduce using rule 17 (type_specifier)


State 32

   20 type_specifier: LONG INT â€¢

    $default  reduce using rule 20 (type_specifier)


State 33

   22 type_specifier: LONG_LONG INT â€¢

    $default  reduce using rule 22 (type_specifier)


State 34

    0 $accept: starter $end â€¢

    $default  accept


State 35

    1 starter: starter builder â€¢

    $default  reduce using rule 1 (starter)


State 36

   55 declaration: type declaration_list â€¢ ';'
   58 declaration_list: declaration_list â€¢ ',' sub_decl

    ','  shift, and go to state 42
    ';'  shift, and go to state 56


State 37

   83 assignment_expr: unary_expr â€¢ assign unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    assign  go to state 51


State 38

    7 function: type identifier â€¢ $@1 '(' argument_list ')' $@2 compound_stmt
   61 sub_decl: identifier â€¢
   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT
   88 lhs: identifier â€¢
  110 array_access: identifier â€¢ '[' array_index ']'

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54
    '['        shift, and go to state 55

    ','       reduce using rule 61 (sub_decl)
    '('       reduce using rule 5 ($@1)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 88 (lhs)

    $@1  go to state 57


State 39

   10 pointer: '*' â€¢ pointer
   11        | '*' â€¢

    '*'  shift, and go to state 39

    $default  reduce using rule 11 (pointer)

    pointer  go to state 58


State 40

    8 type: data_type pointer â€¢

    $default  reduce using rule 8 (type)


State 41

   12 data_type: sign_specifier type_specifier â€¢

    $default  reduce using rule 12 (data_type)


State 42

   58 declaration_list: declaration_list ',' â€¢ sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    sub_decl         go to state 59
    assignment_expr  go to state 24
    unary_expr       go to state 37
    lhs              go to state 26
    identifier       go to state 27
    array_access     go to state 28


State 43

   56 declaration: declaration_list ';' â€¢

    $default  reduce using rule 56 (declaration)


State 44

   94 assign: MUL_ASSIGN â€¢

    $default  reduce using rule 94 (assign)


State 45

   95 assign: DIV_ASSIGN â€¢

    $default  reduce using rule 95 (assign)


State 46

   96 assign: MOD_ASSIGN â€¢

    $default  reduce using rule 96 (assign)


State 47

   92 assign: ADD_ASSIGN â€¢

    $default  reduce using rule 92 (assign)


State 48

   93 assign: SUB_ASSIGN â€¢

    $default  reduce using rule 93 (assign)


State 49

   91 assign: '=' â€¢

    $default  reduce using rule 91 (assign)


State 50

   57 declaration: unary_expr ';' â€¢

    $default  reduce using rule 57 (declaration)


State 51

   83 assignment_expr: unary_expr assign â€¢ unary_expr

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 60
    identifier  go to state 61


State 52

   79 assignment_expr: lhs assign â€¢ arithmetic_expr
   80                | lhs assign â€¢ array_access
   81                | lhs assign â€¢ function_call
   82                | lhs assign â€¢ unary_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    unary_expr       go to state 68
    identifier       go to state 69
    arithmetic_expr  go to state 70
    constant         go to state 71
    array_access     go to state 72
    function_call    go to state 73


State 53

   84 unary_expr: identifier INCREMENT â€¢

    $default  reduce using rule 84 (unary_expr)


State 54

   85 unary_expr: identifier DECREMENT â€¢

    $default  reduce using rule 85 (unary_expr)


State 55

  110 array_access: identifier '[' â€¢ array_index ']'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65

    identifier   go to state 74
    constant     go to state 75
    array_index  go to state 76


State 56

   55 declaration: type declaration_list ';' â€¢

    $default  reduce using rule 55 (declaration)


State 57

    7 function: type identifier $@1 â€¢ '(' argument_list ')' $@2 compound_stmt

    '('  shift, and go to state 77


State 58

   10 pointer: '*' pointer â€¢

    $default  reduce using rule 10 (pointer)


State 59

   58 declaration_list: declaration_list ',' sub_decl â€¢

    $default  reduce using rule 58 (declaration_list)


State 60

   83 assignment_expr: unary_expr assign unary_expr â€¢

    $default  reduce using rule 83 (assignment_expr)


State 61

   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54


State 62

  106 constant: DEC_CONSTANT â€¢

    $default  reduce using rule 106 (constant)


State 63

  107 constant: HEX_CONSTANT â€¢

    $default  reduce using rule 107 (constant)


State 64

  108 constant: CHAR_CONSTANT â€¢

    $default  reduce using rule 108 (constant)


State 65

  109 constant: FLOAT_CONSTANT â€¢

    $default  reduce using rule 109 (constant)


State 66

  103 arithmetic_expr: '-' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 79
    constant         go to state 71


State 67

  102 arithmetic_expr: '(' â€¢ arithmetic_expr ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 80
    constant         go to state 71


State 68

   82 assignment_expr: lhs assign unary_expr â€¢

    $default  reduce using rule 82 (assignment_expr)


State 69

   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT
  104 arithmetic_expr: identifier â€¢
  110 array_access: identifier â€¢ '[' array_index ']'
  113 function_call: identifier â€¢ '(' parameter_list ')'
  114              | identifier â€¢ '(' ')'

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54
    '('        shift, and go to state 81
    '['        shift, and go to state 55

    $default  reduce using rule 104 (arithmetic_expr)


State 70

   79 assignment_expr: lhs assign arithmetic_expr â€¢
   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83
    '*'  shift, and go to state 84
    '/'  shift, and go to state 85
    '%'  shift, and go to state 86

    $default  reduce using rule 79 (assignment_expr)


State 71

  105 arithmetic_expr: constant â€¢

    $default  reduce using rule 105 (arithmetic_expr)


State 72

   80 assignment_expr: lhs assign array_access â€¢

    $default  reduce using rule 80 (assignment_expr)


State 73

   81 assignment_expr: lhs assign function_call â€¢

    $default  reduce using rule 81 (assignment_expr)


State 74

  112 array_index: identifier â€¢

    $default  reduce using rule 112 (array_index)


State 75

  111 array_index: constant â€¢

    $default  reduce using rule 111 (array_index)


State 76

  110 array_access: identifier '[' array_index â€¢ ']'

    ']'  shift, and go to state 87


State 77

    7 function: type identifier $@1 '(' â€¢ argument_list ')' $@2 compound_stmt

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    $default  reduce using rule 28 (argument_list)

    type            go to state 88
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    argument_list   go to state 89
    arguments       go to state 90
    arg             go to state 91


State 78

  104 arithmetic_expr: identifier â€¢

    $default  reduce using rule 104 (arithmetic_expr)


State 79

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr
  103                | '-' arithmetic_expr â€¢

    $default  reduce using rule 103 (arithmetic_expr)


State 80

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr
  102                | '(' arithmetic_expr â€¢ ')'

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83
    '*'  shift, and go to state 84
    '/'  shift, and go to state 85
    '%'  shift, and go to state 86
    ')'  shift, and go to state 92


State 81

  113 function_call: identifier '(' â€¢ parameter_list ')'
  114              | identifier '(' â€¢ ')'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    STRING          shift, and go to state 93
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67
    ')'             shift, and go to state 95

    sub_expr         go to state 96
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101
    parameter_list   go to state 102
    parameter        go to state 103


State 82

   97 arithmetic_expr: arithmetic_expr '+' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 104
    constant         go to state 71


State 83

   98 arithmetic_expr: arithmetic_expr '-' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 105
    constant         go to state 71


State 84

   99 arithmetic_expr: arithmetic_expr '*' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 106
    constant         go to state 71


State 85

  100 arithmetic_expr: arithmetic_expr '/' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 107
    constant         go to state 71


State 86

  101 arithmetic_expr: arithmetic_expr '%' â€¢ arithmetic_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    '-'             shift, and go to state 66
    '('             shift, and go to state 67

    identifier       go to state 78
    arithmetic_expr  go to state 108
    constant         go to state 71


State 87

  110 array_access: identifier '[' array_index ']' â€¢

    $default  reduce using rule 110 (array_access)


State 88

   31 arg: type â€¢ identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 109


State 89

    7 function: type identifier $@1 '(' argument_list â€¢ ')' $@2 compound_stmt

    ')'  shift, and go to state 110


State 90

   27 argument_list: arguments â€¢
   29 arguments: arguments â€¢ ',' arg

    ','  shift, and go to state 111

    $default  reduce using rule 27 (argument_list)


State 91

   30 arguments: arg â€¢

    $default  reduce using rule 30 (arguments)


State 92

  102 arithmetic_expr: '(' arithmetic_expr ')' â€¢

    $default  reduce using rule 102 (arithmetic_expr)


State 93

  118 parameter: STRING â€¢

    $default  reduce using rule 118 (parameter)


State 94

   75 sub_expr: '!' â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 112
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 95

  114 function_call: identifier '(' ')' â€¢

    $default  reduce using rule 114 (function_call)


State 96

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr
  117 parameter: sub_expr â€¢

    LOGICAL_AND  shift, and go to state 113
    LOGICAL_OR   shift, and go to state 114
    LS_EQ        shift, and go to state 115
    GR_EQ        shift, and go to state 116
    EQ           shift, and go to state 117
    NOT_EQ       shift, and go to state 118
    '<'          shift, and go to state 119
    '>'          shift, and go to state 120

    $default  reduce using rule 117 (parameter)


State 97

   77 sub_expr: assignment_expr â€¢

    $default  reduce using rule 77 (sub_expr)


State 98

   78 sub_expr: unary_expr â€¢
   83 assignment_expr: unary_expr â€¢ assign unary_expr

    MUL_ASSIGN  shift, and go to state 44
    DIV_ASSIGN  shift, and go to state 45
    MOD_ASSIGN  shift, and go to state 46
    ADD_ASSIGN  shift, and go to state 47
    SUB_ASSIGN  shift, and go to state 48
    '='         shift, and go to state 49

    $default  reduce using rule 78 (sub_expr)

    assign  go to state 51


State 99

   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT
   88 lhs: identifier â€¢
  104 arithmetic_expr: identifier â€¢
  110 array_access: identifier â€¢ '[' array_index ']'

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54
    '['        shift, and go to state 55

    MUL_ASSIGN  reduce using rule 88 (lhs)
    DIV_ASSIGN  reduce using rule 88 (lhs)
    MOD_ASSIGN  reduce using rule 88 (lhs)
    ADD_ASSIGN  reduce using rule 88 (lhs)
    SUB_ASSIGN  reduce using rule 88 (lhs)
    '='         reduce using rule 88 (lhs)
    $default    reduce using rule 104 (arithmetic_expr)


State 100

   76 sub_expr: arithmetic_expr â€¢
   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    '+'  shift, and go to state 82
    '-'  shift, and go to state 83
    '*'  shift, and go to state 84
    '/'  shift, and go to state 85
    '%'  shift, and go to state 86

    $default  reduce using rule 76 (sub_expr)


State 101

   89 lhs: array_access â€¢

    $default  reduce using rule 89 (lhs)


State 102

  113 function_call: identifier '(' parameter_list â€¢ ')'
  115 parameter_list: parameter_list â€¢ ',' parameter

    ','  shift, and go to state 121
    ')'  shift, and go to state 122


State 103

  116 parameter_list: parameter â€¢

    $default  reduce using rule 116 (parameter_list)


State 104

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   97                | arithmetic_expr '+' arithmetic_expr â€¢
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85
    '%'  shift, and go to state 86

    $default  reduce using rule 97 (arithmetic_expr)


State 105

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   98                | arithmetic_expr '-' arithmetic_expr â€¢
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    '*'  shift, and go to state 84
    '/'  shift, and go to state 85
    '%'  shift, and go to state 86

    $default  reduce using rule 98 (arithmetic_expr)


State 106

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
   99                | arithmetic_expr '*' arithmetic_expr â€¢
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    $default  reduce using rule 99 (arithmetic_expr)


State 107

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  100                | arithmetic_expr '/' arithmetic_expr â€¢
  101                | arithmetic_expr â€¢ '%' arithmetic_expr

    $default  reduce using rule 100 (arithmetic_expr)


State 108

   97 arithmetic_expr: arithmetic_expr â€¢ '+' arithmetic_expr
   98                | arithmetic_expr â€¢ '-' arithmetic_expr
   99                | arithmetic_expr â€¢ '*' arithmetic_expr
  100                | arithmetic_expr â€¢ '/' arithmetic_expr
  101                | arithmetic_expr â€¢ '%' arithmetic_expr
  101                | arithmetic_expr '%' arithmetic_expr â€¢

    $default  reduce using rule 101 (arithmetic_expr)


State 109

   31 arg: type identifier â€¢

    $default  reduce using rule 31 (arg)


State 110

    7 function: type identifier $@1 '(' argument_list ')' â€¢ $@2 compound_stmt

    $default  reduce using rule 6 ($@2)

    $@2  go to state 123


State 111

   29 arguments: arguments ',' â€¢ arg

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9
    VOID       shift, and go to state 10
    CHAR       shift, and go to state 11
    FLOAT      shift, and go to state 12
    CHAR_STAR  shift, and go to state 13

    type            go to state 88
    data_type       go to state 18
    sign_specifier  go to state 19
    type_specifier  go to state 20
    arg             go to state 124


State 112

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr
   75         | '!' sub_expr â€¢

    $default  reduce using rule 75 (sub_expr)


State 113

   73 sub_expr: sub_expr LOGICAL_AND â€¢ M sub_expr

    $default  reduce using rule 119 (M)

    M  go to state 125


State 114

   74 sub_expr: sub_expr LOGICAL_OR â€¢ M sub_expr

    $default  reduce using rule 119 (M)

    M  go to state 126


State 115

   72 sub_expr: sub_expr LS_EQ â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 127
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 116

   71 sub_expr: sub_expr GR_EQ â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 128
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 117

   69 sub_expr: sub_expr EQ â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 129
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 118

   70 sub_expr: sub_expr NOT_EQ â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 130
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 119

   68 sub_expr: sub_expr '<' â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 131
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 120

   67 sub_expr: sub_expr '>' â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 132
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 121

  115 parameter_list: parameter_list ',' â€¢ parameter

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    STRING          shift, and go to state 93
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 96
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101
    parameter        go to state 133


State 122

  113 function_call: identifier '(' parameter_list ')' â€¢

    $default  reduce using rule 113 (function_call)


State 123

    7 function: type identifier $@1 '(' argument_list ')' $@2 â€¢ compound_stmt

    '{'  shift, and go to state 134

    compound_stmt  go to state 135


State 124

   29 arguments: arguments ',' arg â€¢

    $default  reduce using rule 29 (arguments)


State 125

   73 sub_expr: sub_expr LOGICAL_AND M â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 136
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 126

   74 sub_expr: sub_expr LOGICAL_OR M â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 137
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 127

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   72         | sub_expr LS_EQ sub_expr â€¢
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    $default  reduce using rule 72 (sub_expr)


State 128

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   71         | sub_expr GR_EQ sub_expr â€¢
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    $default  reduce using rule 71 (sub_expr)


State 129

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   69         | sub_expr EQ sub_expr â€¢
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 115
    GR_EQ  shift, and go to state 116
    '<'    shift, and go to state 119
    '>'    shift, and go to state 120

    $default  reduce using rule 69 (sub_expr)


State 130

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   70         | sub_expr NOT_EQ sub_expr â€¢
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LS_EQ  shift, and go to state 115
    GR_EQ  shift, and go to state 116
    '<'    shift, and go to state 119
    '>'    shift, and go to state 120

    $default  reduce using rule 70 (sub_expr)


State 131

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   68         | sub_expr '<' sub_expr â€¢
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    $default  reduce using rule 68 (sub_expr)


State 132

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   67         | sub_expr '>' sub_expr â€¢
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    $default  reduce using rule 67 (sub_expr)


State 133

  115 parameter_list: parameter_list ',' parameter â€¢

    $default  reduce using rule 115 (parameter_list)


State 134

   35 compound_stmt: '{' â€¢ $@3 statements '}'

    $default  reduce using rule 34 ($@3)

    $@3  go to state 138


State 135

    7 function: type identifier $@1 '(' argument_list ')' $@2 compound_stmt â€¢

    $default  reduce using rule 7 (function)


State 136

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   73         | sub_expr LOGICAL_AND M sub_expr â€¢
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LS_EQ   shift, and go to state 115
    GR_EQ   shift, and go to state 116
    EQ      shift, and go to state 117
    NOT_EQ  shift, and go to state 118
    '<'     shift, and go to state 119
    '>'     shift, and go to state 120

    $default  reduce using rule 73 (sub_expr)


State 137

   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr
   74         | sub_expr LOGICAL_OR M sub_expr â€¢

    LOGICAL_AND  shift, and go to state 113
    LS_EQ        shift, and go to state 115
    GR_EQ        shift, and go to state 116
    EQ           shift, and go to state 117
    NOT_EQ       shift, and go to state 118
    '<'          shift, and go to state 119
    '>'          shift, and go to state 120

    $default  reduce using rule 74 (sub_expr)


State 138

   35 compound_stmt: '{' $@3 â€¢ statements '}'

    $default  reduce using rule 37 (statements)

    statements  go to state 139


State 139

   35 compound_stmt: '{' $@3 statements â€¢ '}'
   36 statements: statements â€¢ M stmt

    '}'  shift, and go to state 140

    $default  reduce using rule 119 (M)

    M  go to state 141


State 140

   35 compound_stmt: '{' $@3 statements '}' â€¢

    $default  reduce using rule 35 (compound_stmt)


State 141

   36 statements: statements M â€¢ stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 142
    FOR         shift, and go to state 143
    WHILE       shift, and go to state 144
    CONTINUE    shift, and go to state 145
    BREAK       shift, and go to state 146
    RETURN      shift, and go to state 147
    '{'         shift, and go to state 134

    type              go to state 148
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 149
    compound_stmt     go to state 150
    single_stmt       go to state 151
    for_block         go to state 152
    if_block          go to state 153
    while_block       go to state 154
    declaration       go to state 155
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 156
    array_access      go to state 28
    function_call     go to state 157


State 142

   50 if_block: IF â€¢ '(' expression ')' M stmt
   51         | IF â€¢ '(' expression ')' M stmt ELSE N M stmt

    '('  shift, and go to state 158


State 143

   49 for_block: FOR â€¢ '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    '('  shift, and go to state 159


State 144

   54 while_block: WHILE â€¢ M '(' expression ')' M $@6 stmt $@7

    $default  reduce using rule 119 (M)

    M  go to state 160


State 145

   44 single_stmt: CONTINUE â€¢ ';'

    ';'  shift, and go to state 161


State 146

   45 single_stmt: BREAK â€¢ ';'

    ';'  shift, and go to state 162


State 147

   43 single_stmt: RETURN â€¢ ';'
   46            | RETURN â€¢ sub_expr ';'

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67
    ';'             shift, and go to state 163

    sub_expr         go to state 164
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 148

   55 declaration: type â€¢ declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 36
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 37
    lhs               go to state 26
    identifier        go to state 27
    array_access      go to state 28


State 149

   36 statements: statements M stmt â€¢

    $default  reduce using rule 36 (statements)


State 150

   32 stmt: compound_stmt â€¢

    $default  reduce using rule 32 (stmt)


State 151

   33 stmt: single_stmt â€¢

    $default  reduce using rule 33 (stmt)


State 152

   39 single_stmt: for_block â€¢

    $default  reduce using rule 39 (single_stmt)


State 153

   38 single_stmt: if_block â€¢

    $default  reduce using rule 38 (single_stmt)


State 154

   40 single_stmt: while_block â€¢

    $default  reduce using rule 40 (single_stmt)


State 155

   41 single_stmt: declaration â€¢

    $default  reduce using rule 41 (single_stmt)


State 156

   61 sub_decl: identifier â€¢
   84 unary_expr: identifier â€¢ INCREMENT
   85           | identifier â€¢ DECREMENT
   88 lhs: identifier â€¢
  110 array_access: identifier â€¢ '[' array_index ']'
  113 function_call: identifier â€¢ '(' parameter_list ')'
  114              | identifier â€¢ '(' ')'

    INCREMENT  shift, and go to state 53
    DECREMENT  shift, and go to state 54
    '('        shift, and go to state 81
    '['        shift, and go to state 55

    ','       reduce using rule 61 (sub_decl)
    ';'       reduce using rule 61 (sub_decl)
    $default  reduce using rule 88 (lhs)


State 157

   42 single_stmt: function_call â€¢ ';'

    ';'  shift, and go to state 165


State 158

   50 if_block: IF '(' â€¢ expression ')' M stmt
   51         | IF '(' â€¢ expression ')' M stmt ELSE N M stmt

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    expression       go to state 166
    sub_expr         go to state 167
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 159

   49 for_block: FOR '(' â€¢ expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67
    ';'             shift, and go to state 168

    expression_stmt  go to state 169
    expression       go to state 170
    sub_expr         go to state 167
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 160

   54 while_block: WHILE M â€¢ '(' expression ')' M $@6 stmt $@7

    '('  shift, and go to state 171


State 161

   44 single_stmt: CONTINUE ';' â€¢

    $default  reduce using rule 44 (single_stmt)


State 162

   45 single_stmt: BREAK ';' â€¢

    $default  reduce using rule 45 (single_stmt)


State 163

   43 single_stmt: RETURN ';' â€¢

    $default  reduce using rule 43 (single_stmt)


State 164

   46 single_stmt: RETURN sub_expr â€¢ ';'
   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 113
    LOGICAL_OR   shift, and go to state 114
    LS_EQ        shift, and go to state 115
    GR_EQ        shift, and go to state 116
    EQ           shift, and go to state 117
    NOT_EQ       shift, and go to state 118
    '<'          shift, and go to state 119
    '>'          shift, and go to state 120
    ';'          shift, and go to state 172


State 165

   42 single_stmt: function_call ';' â€¢

    $default  reduce using rule 42 (single_stmt)


State 166

   50 if_block: IF '(' expression â€¢ ')' M stmt
   51         | IF '(' expression â€¢ ')' M stmt ELSE N M stmt
   65 expression: expression â€¢ ',' sub_expr

    ','  shift, and go to state 173
    ')'  shift, and go to state 174


State 167

   66 expression: sub_expr â€¢
   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 113
    LOGICAL_OR   shift, and go to state 114
    LS_EQ        shift, and go to state 115
    GR_EQ        shift, and go to state 116
    EQ           shift, and go to state 117
    NOT_EQ       shift, and go to state 118
    '<'          shift, and go to state 119
    '>'          shift, and go to state 120

    $default  reduce using rule 66 (expression)


State 168

   64 expression_stmt: ';' â€¢

    $default  reduce using rule 64 (expression_stmt)


State 169

   49 for_block: FOR '(' expression_stmt â€¢ M expression_stmt M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 119 (M)

    M  go to state 175


State 170

   63 expression_stmt: expression â€¢ ';'
   65 expression: expression â€¢ ',' sub_expr

    ','  shift, and go to state 173
    ';'  shift, and go to state 176


State 171

   54 while_block: WHILE M '(' â€¢ expression ')' M $@6 stmt $@7

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    expression       go to state 177
    sub_expr         go to state 167
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 172

   46 single_stmt: RETURN sub_expr ';' â€¢

    $default  reduce using rule 46 (single_stmt)


State 173

   65 expression: expression ',' â€¢ sub_expr

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    sub_expr         go to state 178
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 174

   50 if_block: IF '(' expression ')' â€¢ M stmt
   51         | IF '(' expression ')' â€¢ M stmt ELSE N M stmt

    $default  reduce using rule 119 (M)

    M  go to state 179


State 175

   49 for_block: FOR '(' expression_stmt M â€¢ expression_stmt M expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67
    ';'             shift, and go to state 168

    expression_stmt  go to state 180
    expression       go to state 170
    sub_expr         go to state 167
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 176

   63 expression_stmt: expression ';' â€¢

    $default  reduce using rule 63 (expression_stmt)


State 177

   54 while_block: WHILE M '(' expression â€¢ ')' M $@6 stmt $@7
   65 expression: expression â€¢ ',' sub_expr

    ','  shift, and go to state 173
    ')'  shift, and go to state 181


State 178

   65 expression: expression ',' sub_expr â€¢
   67 sub_expr: sub_expr â€¢ '>' sub_expr
   68         | sub_expr â€¢ '<' sub_expr
   69         | sub_expr â€¢ EQ sub_expr
   70         | sub_expr â€¢ NOT_EQ sub_expr
   71         | sub_expr â€¢ GR_EQ sub_expr
   72         | sub_expr â€¢ LS_EQ sub_expr
   73         | sub_expr â€¢ LOGICAL_AND M sub_expr
   74         | sub_expr â€¢ LOGICAL_OR M sub_expr

    LOGICAL_AND  shift, and go to state 113
    LOGICAL_OR   shift, and go to state 114
    LS_EQ        shift, and go to state 115
    GR_EQ        shift, and go to state 116
    EQ           shift, and go to state 117
    NOT_EQ       shift, and go to state 118
    '<'          shift, and go to state 119
    '>'          shift, and go to state 120

    $default  reduce using rule 65 (expression)


State 179

   50 if_block: IF '(' expression ')' M â€¢ stmt
   51         | IF '(' expression ')' M â€¢ stmt ELSE N M stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 142
    FOR         shift, and go to state 143
    WHILE       shift, and go to state 144
    CONTINUE    shift, and go to state 145
    BREAK       shift, and go to state 146
    RETURN      shift, and go to state 147
    '{'         shift, and go to state 134

    type              go to state 148
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 182
    compound_stmt     go to state 150
    single_stmt       go to state 151
    for_block         go to state 152
    if_block          go to state 153
    while_block       go to state 154
    declaration       go to state 155
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 156
    array_access      go to state 28
    function_call     go to state 157


State 180

   49 for_block: FOR '(' expression_stmt M expression_stmt â€¢ M expression ')' $@4 N M stmt $@5

    $default  reduce using rule 119 (M)

    M  go to state 183


State 181

   54 while_block: WHILE M '(' expression ')' â€¢ M $@6 stmt $@7

    $default  reduce using rule 119 (M)

    M  go to state 184


State 182

   50 if_block: IF '(' expression ')' M stmt â€¢
   51         | IF '(' expression ')' M stmt â€¢ ELSE N M stmt

    ELSE  shift, and go to state 185

    $default  reduce using rule 50 (if_block)


State 183

   49 for_block: FOR '(' expression_stmt M expression_stmt M â€¢ expression ')' $@4 N M stmt $@5

    IDENTIFIER      shift, and go to state 1
    DEC_CONSTANT    shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    CHAR_CONSTANT   shift, and go to state 64
    FLOAT_CONSTANT  shift, and go to state 65
    INCREMENT       shift, and go to state 2
    DECREMENT       shift, and go to state 3
    '-'             shift, and go to state 66
    '!'             shift, and go to state 94
    '('             shift, and go to state 67

    expression       go to state 186
    sub_expr         go to state 167
    assignment_expr  go to state 97
    unary_expr       go to state 98
    lhs              go to state 26
    identifier       go to state 99
    arithmetic_expr  go to state 100
    constant         go to state 71
    array_access     go to state 101


State 184

   54 while_block: WHILE M '(' expression ')' M â€¢ $@6 stmt $@7

    $default  reduce using rule 52 ($@6)

    $@6  go to state 187


State 185

   51 if_block: IF '(' expression ')' M stmt ELSE â€¢ N M stmt

    $default  reduce using rule 120 (N)

    N  go to state 188


State 186

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression â€¢ ')' $@4 N M stmt $@5
   65 expression: expression â€¢ ',' sub_expr

    ','  shift, and go to state 173
    ')'  shift, and go to state 189


State 187

   54 while_block: WHILE M '(' expression ')' M $@6 â€¢ stmt $@7

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 142
    FOR         shift, and go to state 143
    WHILE       shift, and go to state 144
    CONTINUE    shift, and go to state 145
    BREAK       shift, and go to state 146
    RETURN      shift, and go to state 147
    '{'         shift, and go to state 134

    type              go to state 148
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 190
    compound_stmt     go to state 150
    single_stmt       go to state 151
    for_block         go to state 152
    if_block          go to state 153
    while_block       go to state 154
    declaration       go to state 155
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 156
    array_access      go to state 28
    function_call     go to state 157


State 188

   51 if_block: IF '(' expression ')' M stmt ELSE N â€¢ M stmt

    $default  reduce using rule 119 (M)

    M  go to state 191


State 189

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' â€¢ $@4 N M stmt $@5

    $default  reduce using rule 47 ($@4)

    $@4  go to state 192


State 190

   54 while_block: WHILE M '(' expression ')' M $@6 stmt â€¢ $@7

    $default  reduce using rule 53 ($@7)

    $@7  go to state 193


State 191

   51 if_block: IF '(' expression ')' M stmt ELSE N M â€¢ stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 142
    FOR         shift, and go to state 143
    WHILE       shift, and go to state 144
    CONTINUE    shift, and go to state 145
    BREAK       shift, and go to state 146
    RETURN      shift, and go to state 147
    '{'         shift, and go to state 134

    type              go to state 148
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 194
    compound_stmt     go to state 150
    single_stmt       go to state 151
    for_block         go to state 152
    if_block          go to state 153
    while_block       go to state 154
    declaration       go to state 155
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 156
    array_access      go to state 28
    function_call     go to state 157


State 192

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 â€¢ N M stmt $@5

    $default  reduce using rule 120 (N)

    N  go to state 195


State 193

   54 while_block: WHILE M '(' expression ')' M $@6 stmt $@7 â€¢

    $default  reduce using rule 54 (while_block)


State 194

   51 if_block: IF '(' expression ')' M stmt ELSE N M stmt â€¢

    $default  reduce using rule 51 (if_block)


State 195

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N â€¢ M stmt $@5

    $default  reduce using rule 119 (M)

    M  go to state 196


State 196

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M â€¢ stmt $@5

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    VOID        shift, and go to state 10
    CHAR        shift, and go to state 11
    FLOAT       shift, and go to state 12
    CHAR_STAR   shift, and go to state 13
    IF          shift, and go to state 142
    FOR         shift, and go to state 143
    WHILE       shift, and go to state 144
    CONTINUE    shift, and go to state 145
    BREAK       shift, and go to state 146
    RETURN      shift, and go to state 147
    '{'         shift, and go to state 134

    type              go to state 148
    data_type         go to state 18
    sign_specifier    go to state 19
    type_specifier    go to state 20
    stmt              go to state 197
    compound_stmt     go to state 150
    single_stmt       go to state 151
    for_block         go to state 152
    if_block          go to state 153
    while_block       go to state 154
    declaration       go to state 155
    declaration_list  go to state 22
    sub_decl          go to state 23
    assignment_expr   go to state 24
    unary_expr        go to state 25
    lhs               go to state 26
    identifier        go to state 156
    array_access      go to state 28
    function_call     go to state 157


State 197

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt â€¢ $@5

    $default  reduce using rule 48 ($@5)

    $@5  go to state 198


State 198

   49 for_block: FOR '(' expression_stmt M expression_stmt M expression ')' $@4 N M stmt $@5 â€¢

    $default  reduce using rule 49 (for_block)
